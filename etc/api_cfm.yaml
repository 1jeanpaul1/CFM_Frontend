openapi: 3.0.0
info:
  description: Community Fridge Map API
  version: 1.0.0
  title: Community Fridge Map API
  contact:
    email: info@collectivefocus.site
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html


tags:
  - name: fridge
    description: Operations for the fridges
  - name: update
    description: Updates on food content and operational status


paths:
  /v1/fridges:
    get:
      summary: Return a list of all Fridge objects.
      tags:
        - fridge
      responses:
        '200':
          description: A JSON array of fridge objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fridge'
        '404':
          description: The server can not find the requested resource.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
        '511':
          description: Indicates that the client needs to authenticate to gain network access.

    post:
      summary: Create a new Fridge object.
      tags:
        - fridge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fridge:
                  $ref: '#/components/schemas/Fridge'
                maintainer:
                  $ref: '#/components/schemas/Maintainer'
      responses:
        '201':
          description: Fridge object was created successfully.
        '400':
          description: The request could not be understood by the server due to incorrect syntax.
        '401':
          description: Indicates that the request requires user authentication information.
        '409':
          description: Fridge object already exists.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.

    put:
      summary: Update an existing Fridge object.
      tags:
        - fridge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fridge:
                  $ref: '#/components/schemas/Fridge'
                maintainer:
                  $ref: '#/components/schemas/Maintainer'
      responses:
        '201':
          description: Fridge object was updated successfully.
        '400':
          description: The request could not be understood by the server due to incorrect syntax.
        '401':
          description: Indicates that the request requires user authentication information.
        '404':
          description: Fridge object does not exist, therefore it cannot be updated.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.

  /v1/fridges/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Database key of the fridge.
        example: gowanusfridge
    get:
      summary: Return a Fridge object.
      tags:
        - fridge
      responses:
        '200':
          description: The fridge object in JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  fridge:
                    $ref: '#/components/schemas/Fridge'
                  update:
                    $ref: '#/components/schemas/Update'
        '404':
          description: The server can not find the requested resource.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
        '511':
          description: Indicates that the client needs to authenticate to gain network access.

  /v1/fridges/{id}/updates:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Database key of the fridge.
        example: gowanusfridge

    get:
      summary: Return a list of Update objects for the specified fridge.
      tags:
        - update
      responses:
        '200':
          description: A JSON array of Update objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Update'
        '404':
          description: The server can not find the requested resource.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
        '511':
          description: Indicates that the client needs to authenticate to gain network access.

    post:
      summary: Create a new Update object.
      tags:
        - update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Update'
      responses:
        '201':
          description: Update object was created successfully.
        '400':
          description: The request could not be understood by the server due to incorrect syntax.
        '401':
          description: Indicates that the request requires user authentication information.
        '404':
          description: The Fridge object referred to by the Update object does not exist.
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.


components:

  schemas:

    Update:
      type: object

      required:
        - timestamp
        - operation

      properties:
        timestamp:
          description: The ISO formatted date/time of this status update.
          type: string
          format: date-time
          readOnly: true
          example: "2022-03-29T18:10:38.547Z"

        operation:
          description: The operational status of the fridge.
          type: string
          enum: [working, out of order, not at location]

        foodPercentage:
          description: The percentage of food in the fridge.
          type: integer
          enum: [100, 75, 50, 25, 0]

        foodPhotoURL:
          description: Fully qualified URL path to a picture of the food.
          type: string
          format: uri
          nullable: true
          readOnly: true
          example: https://s3.amazonaws.com/bucket/path/food.webp

        foodPhotoBinary:
          description: Binary data for photo upload.
          type: string
          format: binary
          nullable: true
          writeOnly: true

        notes:
          description: Notes about the status update.
          type: string
          example: Filled with Mars bars and M&M candy.


    Location:
      type: object

      example:
        street: 910 Woodland Drive
        city: Navarre
        state: FL
        zip: 32566
        geoLat: 27.963050
        geoLng: -82.270260

      required:
        - street
        - zip
        - geoLat
        - geoLng

      properties:
        street:
          type: string
          example: 17 Nassau Ave

        city:
          type: string
          example: Brooklyn

        state:
          type: string
          example: NY
        zip:
          type: string
          example: 11222

        geoLat:
          description: Geographic latitude.
          type: number
          readOnly: true
          example: 40.722814

        geoLng:
          description: Geographic longitude.
          type: number
          readOnly: true
          example: -73.95405


    Fridge:
      type: object

      required:
        - id
        - name
        - location

      properties:
        id:
          description: The database key for this fridge record.
          type: string
          readOnly: true
          example: greenpointfridge

        name:
          description: A descriptive title for this fridge location.
          type: string
          example: Greenpoint Fridge

        tags:
          description: Arbitrary words to associate with this fridge.
          type: array
          items:
            type: string
          example: [harlem, halal, kashrut]

        location:
          $ref: '#/components/schemas/Location'

        notes:
          description: Notes about the fridge.
          type: string
          example: Next to Lot Radio.

        photoURL:
          description: Fully qualified URL path to a picture of the fridge.
          type: string
          format: uri
          nullable: true
          readOnly: true
          example: https://s3.amazonaws.com/bucket/path/fridge.webp

        photoBinary:
          description: Binary data for photo upload.
          type: string
          format: binary
          nullable: true
          writeOnly: true

        verified:
          description: Signifies that the fridge data has been verified by the fridge maintainer.
          type: boolean
          default: false
          example: false


    Maintainer:
      type: object

      example:
        name: Jasmine Flores
        organization: Garcia-Hansen Wellness
        phone: 182-977-3823
        email: jflores@example.org
        website: http://wellness.com/
        instagram: garcia-hansenwellness

      properties:
        name:
          description: Name of the contact person.
          type: string
          nullable: true
          example: Emily Ward

        organization:
          description: Name of the organization.
          type: string
          nullable: true
          example:  Food For People

        phone:
          type: string
          format: phone
          nullable: true
          example: 782-654-4748

        email:
          type: string
          format: email
          nullable: true
          example: guerrerodavid@example.net

        website:
          type: string
          format: uri
          nullable: true
          example: http://gray.com/

        instagram:
          type: string
          nullable: true
          example: foodforpeople
